// Generated by ts-to-zod
import { z } from "zod";
import {
  AppJobAction,
  AppSpec,
  AppPermission,
  AppsError,
  AppsWarning,
  AppsActions,
} from "./apps";

export const appJobActionSchema = z.nativeEnum(AppJobAction);

export const appBasicsSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  version: z.string(),
  icon: z.string(),
  train: z.string(),
});

export const appSpecSchema = z.nativeEnum(AppSpec);

export const appPermissionSchema = z.nativeEnum(AppPermission);

export const appsErrorSchema = z.nativeEnum(AppsError);

export const appsWarningSchema = z.nativeEnum(AppsWarning);

export const appsActionsSchema = z.nativeEnum(AppsActions);

export const appsHealthSchema = z.object({
  healthy: z.boolean(),
  errors: z.array(appsErrorSchema),
  warnings: z.array(appsWarningSchema),
  actions_available: z.array(appsActionsSchema),
});

const locationPreferenceIdSchema = z.any();

export const appMaintainerSchema = z.object({
  email: z.string(),
  name: z.string(),
  url: z.string(),
});

const appMetadataSchema = z.any();

const apiTimestampSchema = z.any();

export const availableAppSchema = z.object({
  healthy: z.boolean(),
  installed: z.boolean(),
  categories: z.array(z.string()),
  name: z.string(),
  title: z.string(),
  description: z.string(),
  app_readme: z.string(),
  app_metadata: appMetadataSchema,
  location: z.string(),
  healthy_error: z.string(),
  latest_version: z.string(),
  latest_app_version: z.string(),
  icon_url: z.string(),
  train: z.string(),
  catalog: z.string(),
  last_update: apiTimestampSchema,
  recommended: z.boolean(),
  maintainers: z.array(appMaintainerSchema),
  tags: z.array(z.string()),
  home: z.string(),
  latest_human_version: z.string(),
  screenshots: z.array(z.string()),
  sources: z.array(z.string()),
  versions: z.unknown(),
});

const appStateSchema = z.any();

const fileAccessSchema = z.any();

const chartFormValueSchema = z.any();

export const appRequirementsSchema = z.object({
  permissions: z.array(appPermissionSchema),
  specifications: z.array(appSpecSchema),
  locations: z.array(locationPreferenceIdSchema),
  ports: z.array(z.number()),
});

export const appRequirementsCheckSchema = z.object({
  permissions: z.object({
    met: z.array(appPermissionSchema),
    unmet: z.array(appPermissionSchema),
  }),
  specifications: z.object({
    met: z.array(appSpecSchema),
    unmet: z.array(appSpecSchema),
  }),
  locations: z.object({
    met: z.array(locationPreferenceIdSchema),
    unmet: z.array(locationPreferenceIdSchema),
  }),
});

export const appListingSchema = availableAppSchema.extend({
  hexos: z.boolean(),
  recommended_during_setup: z.boolean().optional(),
  requirements: appRequirementsSchema,
});

export const appInfoSchema = appBasicsSchema.extend({
  status: appStateSchema,
  url_webui: z.string(),
});

export const appInfoDetailedSchema = appInfoSchema.extend({
  data: z.array(z.array(z.number())),
});

const appsInstallScriptV1Schema = z.object({
  version: z.literal(1),
  ensure_directories_exists: z
    .array(
      z.union([
        z.string(),
        z.object({
          path: z.string(),
          network_share: z.boolean().optional(),
          posix: z.boolean().optional(),
        }),
      ]),
    )
    .optional(),
  ensure_permissions_exists: z
    .array(
      z.object({
        path: z.string(),
        username: z.string(),
        access: fileAccessSchema,
        posix: z
          .object({
            groupname: z.string(),
          })
          .optional(),
      }),
    )
    .optional(),
  app_values: z.record(chartFormValueSchema),
});

export const appsInstallScriptSchema = appsInstallScriptV1Schema;
