// Generated by ts-to-zod
import { z } from "zod";
import {
  ServerUserType,
  ServerStorageIcon,
  ServerStatusSupported,
  ServerStatusIcons,
  ServerFolderIcons,
  ServerMiscIcons,
  ServerPoolType,
  ServerPoolError,
  ServerPoolWarning,
  ServerAccess,
  FileAccess,
  ServerFolderUseType,
  ServerDriveLabel,
  ServerDriveWarning,
  ServerDriveError,
  ServerStatusType,
  ServerDeviceError,
  ServerDeviceWarning,
  ServerDeviceActions,
  ServerNetworkInterfaceMode,
  ServerHealthError,
  ServerHealthWarning,
  ServerActions,
} from "./server";

import { appsHealthSchema } from "./apps-schema";
import { vMSHealthSchema } from "./vms-schema";

export const serverUserTypeSchema = z.nativeEnum(ServerUserType);

export const serverUserSchema = z.object({
  username: z.string(),
  type: serverUserTypeSchema.optional(),
});

export const serverStorageIconSchema = z.nativeEnum(ServerStorageIcon);

export const serverStatusSupportedSchema = z.nativeEnum(ServerStatusSupported);

export const serverStatusIconsSchema = z.nativeEnum(ServerStatusIcons);

export const serverFolderIconsSchema = z.nativeEnum(ServerFolderIcons);

export const serverMiscIconsSchema = z.nativeEnum(ServerMiscIcons);

export const serverSettingSchema = z.object({
  id: z.string(),
  name: z.string(),
  hostid: z.string().nullable(),
  created: z.string(),
  updated: z.string(),
  value: z.string(),
  json: z.boolean(),
});

export const serverPoolTypeSchema = z.nativeEnum(ServerPoolType);

export const serverPoolErrorSchema = z.nativeEnum(ServerPoolError);

export const serverPoolWarningSchema = z.nativeEnum(ServerPoolWarning);

export const serverRecordSchema = z.object({
  hostid: z.string(),
  email: z.string().optional(),
  apikey: z.string().optional(),
  lanip: z.string().optional(),
  wanip: z.string().optional(),
  nodehost: z.string().optional(),
  connected: z.union([z.literal("N"), z.literal("Y")]).optional(),
  servername: z.string().optional(),
  wizardcompleted: z.union([z.date(), z.string()]).optional(),
  lastconnected: z.union([z.date(), z.string()]).optional(),
  truenas_version: z.string().optional(),
});

export const serverAccessSchema = z.nativeEnum(ServerAccess);

export const fileAccessSchema = z.nativeEnum(FileAccess);

export const serverFolderUserSchema = z.object({
  access: z.array(fileAccessSchema),
  user: serverUserSchema,
});

export const serverFolderUseTypeSchema = z.nativeEnum(ServerFolderUseType);

export const serverFolderUseSchema = z.object({
  type: serverFolderUseTypeSchema,
  id: z.string(),
});

export const serverDriveLabelSchema = z.nativeEnum(ServerDriveLabel);

export const serverDriveWarningSchema = z.nativeEnum(ServerDriveWarning);

export const serverDriveErrorSchema = z.nativeEnum(ServerDriveError);

export const serverStatusTypeSchema = z.nativeEnum(ServerStatusType);

export const serverDeviceErrorSchema = z.nativeEnum(ServerDeviceError);

export const serverDeviceWarningSchema = z.nativeEnum(ServerDeviceWarning);

export const serverDeviceActionsSchema = z.nativeEnum(ServerDeviceActions);

export const serverDeviceHealthSchema = z.object({
  healthy: z.boolean(),
  errors: z.array(serverDeviceErrorSchema),
  warnings: z.array(serverDeviceWarningSchema),
  actions_available: z.array(serverDeviceActionsSchema),
});

export const serverStatusBasicsSchema = z.object({
  type: serverStatusTypeSchema,
  details: z.string().optional(),
  status: serverStatusSupportedSchema.optional(),
  statusIcon: serverStatusIconsSchema.optional(),
});

export const serverSystemDataSystemDeviceSchema = z.object({
  details: z.string(),
  data: z.any().optional(),
  status: serverStatusSupportedSchema,
  statusIcon: serverStatusIconsSchema,
  health: serverDeviceHealthSchema,
});

export const serverSystemDataSystemDeviceDataSchema = z.object({
  processor: serverSystemDataSystemDeviceSchema.optional(),
  memory: serverSystemDataSystemDeviceSchema.optional(),
  motherboard: serverSystemDataSystemDeviceSchema.optional(),
  gpu: z.array(serverSystemDataSystemDeviceSchema).optional(),
  networking: z.array(serverSystemDataSystemDeviceSchema).optional(),
});

export const serverSystemDataApplicationsSchema =
  serverStatusBasicsSchema.extend({
    type: z.literal(ServerStatusType.APPLICATIONS),
    health: appsHealthSchema,
  });

export const serverSystemDataVirtualizationSchema =
  serverStatusBasicsSchema.extend({
    type: z.literal(ServerStatusType.VIRTUALIZATION),
    health: vMSHealthSchema,
  });

export const serverSystemDataEmptySchema = serverStatusBasicsSchema.extend({
  type: z.union([
    z.literal(ServerStatusType.VIRTUALIZATION),
    z.literal(ServerStatusType.APPLICATIONS),
  ]),
});

export const serverMemoryInfoSchema = z.object({
  total: z.number(),
  in_use: z.number(),
  cached: z.number(),
  data: z.array(z.array(z.number())),
});

export const serverGlobalNetworkSchema = z.object({
  name: z.string(),
  dns1: z.string(),
  dns2: z.string(),
  dns3: z.string(),
  gateway: z.string(),
});

export const serverNetworkInterfaceModeSchema = z.nativeEnum(
  ServerNetworkInterfaceMode,
);

export const serverNetworkInterfaceConfigurationSchema = z.object({
  ipv4: z.string(),
  ipv6: z.string(),
  description: z.string(),
  mode: serverNetworkInterfaceModeSchema,
  gateway: z.string().optional(),
});

export const serverProcessorInfoSchema = z.object({
  base_clock: z.string(),
  current_clock: z.string(),
  temperature: z.string(),
  uptime: z.string(),
  usage_percent: z.string(),
  data: z.array(z.array(z.number())),
});

export const serverHealthErrorSchema = z.nativeEnum(ServerHealthError);

export const serverHealthWarningSchema = z.nativeEnum(ServerHealthWarning);

export const serverActionsSchema = z.nativeEnum(ServerActions);

export const serverHealthSchema = z.object({
  healthy: z.boolean(),
  errors: z.array(serverHealthErrorSchema),
  warnings: z.array(serverHealthWarningSchema),
  actions_available: z.array(serverActionsSchema),
});

const diskTypeSchema = z.any();

const poolStatusSchema = z.any();

const fileTypeSchema = z.any();

const topologyItemStatusSchema = z.any();

const networkInterfaceTypeSchema = z.any();

export const serverPoolBasicsSchema = z.object({
  type: serverPoolTypeSchema,
  disks_type: diskTypeSchema,
  name: z.string(),
});

export const serverDriveSchema = z.object({
  guid: z.string(),
  details: z.string(),
  model: z.string(),
  serial: z.string(),
  label: serverDriveLabelSchema,
  type: diskTypeSchema,
  size: z.string(),
  realsize: z.number(),
  devname: z.string(),
  icon: serverStorageIconSchema,
  statusIcon: serverStatusIconsSchema.optional(),
  status: topologyItemStatusSchema.optional(),
  warnings: z.array(serverDriveWarningSchema).optional(),
  errors: z.array(serverDriveErrorSchema).optional(),
  existingData: z.boolean().optional(),
  temperature: z.number().optional(),
  healthDetails: topologyItemStatusSchema.optional(),
});

export const serverPoolNewSchema = serverPoolBasicsSchema.extend({
  devnames: z.array(z.string()),
});

export const serverPoolSchema = serverPoolBasicsSchema.extend({
  id: z.number().optional(),
  guid: z.string().optional(),
  path: z.string(),
  errors: z.array(serverPoolErrorSchema).optional(),
  warnings: z.array(serverPoolWarningSchema).optional(),
  useable_storage: z.string().optional(),
  healthy: z.boolean().optional(),
  status: poolStatusSchema,
  status_detail: z.string(),
  used_storage: z.string().optional(),
  used_percentage: z.number().optional(),
  drives: z.array(serverDriveSchema),
});

export const serversSchema = z.object({
  claimed: z.array(serverRecordSchema),
  configured: z.array(serverRecordSchema),
});

export const serverFileSchema = z.object({
  name: z.string(),
  path: z.string(),
  type: fileTypeSchema,
});

export const serverFolderSchema = z.object({
  label: z.string(),
  access: serverAccessSchema,
  pool: serverPoolSchema.optional(),
  users: z.array(serverFolderUserSchema).optional(),
  used_by: z.array(serverFolderUseSchema).optional(),
});

export const serverFoldersSchema = z.object({
  user: z.array(serverFolderSchema),
  system: z.array(serverFolderSchema),
});

export const serverDrivesGroupedBySizeSchema = z.record(
  z.array(serverDriveSchema),
);

export const serverSystemDataSystemSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.SYSTEM),
  data: serverSystemDataSystemDeviceDataSchema,
  health: serverHealthSchema,
});

export const serverSystemDataStorageSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.STORAGE),
  data: z.object({
    drives: z.array(serverDriveSchema).optional(),
  }),
});

export const serverSystemDataSchema = z.union([
  serverSystemDataSystemSchema,
  serverSystemDataStorageSchema,
  serverSystemDataApplicationsSchema,
  serverSystemDataVirtualizationSchema,
  serverSystemDataEmptySchema,
]);

export const serverSystemSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.SYSTEM_OVERVIEW),
  data: z.array(serverSystemDataSchema).optional(),
});

export const serverNetworkInterfaceSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: networkInterfaceTypeSchema,
  in: z.number(),
  out: z.number(),
});

export const serverNetworkInterfaceWithConfigurationSchema =
  serverNetworkInterfaceSchema.extend({
    configuration: serverNetworkInterfaceConfigurationSchema,
    supported_media: z.array(z.unknown()),
  });

export const serverNetworkInterfaceDetailedSchema =
  serverNetworkInterfaceWithConfigurationSchema.extend({
    data: z.array(z.array(z.number())),
  });

export const serverStorageSchema = z.object({
  pools: z.array(serverPoolSchema),
  unassigned: z.array(serverDriveSchema),
});
