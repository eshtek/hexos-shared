// AUTO-GENERATED FILE - DO NOT EDIT

// Generated by ts-to-zod
import { z } from "zod";
import {
  ServerUserType,
  ServerStorageIcon,
  ServerStatusSupported,
  ServerStatusIcons,
  ServerFolderIcons,
  ServerPoolType,
  ServerPoolError,
  ServerAccess,
  FileAccess,
  ServerDriveLabel,
  ServerDriveWarning,
  ServerDriveError,
  ServerStatusType,
  ServerNetworkInterfaceMode,
  ServerHealthError,
  ServerActions,
} from "./server";

export const serverUserTypeSchema = z.nativeEnum(ServerUserType);

export const serverUserSchema = z.object({
  username: z.string(),
  type: serverUserTypeSchema.optional(),
});

export const serverStorageIconSchema = z.nativeEnum(ServerStorageIcon);

export const serverStatusSupportedSchema = z.nativeEnum(ServerStatusSupported);

export const serverStatusIconsSchema = z.nativeEnum(ServerStatusIcons);

export const serverFolderIconsSchema = z.nativeEnum(ServerFolderIcons);

export const serverSettingSchema = z.object({
  id: z.string(),
  name: z.string(),
  hostid: z.string().nullable(),
  created: z.string(),
  updated: z.string(),
  value: z.string(),
  json: z.boolean(),
});

export const serverPoolTypeSchema = z.nativeEnum(ServerPoolType);

export const serverPoolErrorSchema = z.nativeEnum(ServerPoolError);

export const serverRecordSchema = z.object({
  hostid: z.string(),
  email: z.string().optional(),
  apikey: z.string().optional(),
  lanip: z.string().optional(),
  wanip: z.string().optional(),
  nodehost: z.string().optional(),
  connected: z.union([z.literal("N"), z.literal("Y")]).optional(),
  servername: z.string().optional(),
  wizardcompleted: z.union([z.date(), z.string()]).optional(),
  lastconnected: z.union([z.date(), z.string()]).optional(),
  truenas_version: z.string().optional(),
});

export const serverAccessSchema = z.nativeEnum(ServerAccess);

export const fileAccessSchema = z.nativeEnum(FileAccess);

export const serverFolderUserSchema = z.object({
  access: z.array(fileAccessSchema),
  user: serverUserSchema,
});

export const serverDriveLabelSchema = z.nativeEnum(ServerDriveLabel);

export const serverDriveWarningSchema = z.nativeEnum(ServerDriveWarning);

export const serverDriveErrorSchema = z.nativeEnum(ServerDriveError);

export const serverStatusTypeSchema = z.nativeEnum(ServerStatusType);

export const serverStatusBasicsSchema = z.object({
  type: serverStatusTypeSchema,
  details: z.string().optional(),
  status: serverStatusSupportedSchema.optional(),
  statusIcon: serverStatusIconsSchema.optional(),
});

export const serverSystemDataSystemSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.SYSTEM),
  data: z.object({
    processor: z.string().optional(),
    memory: z.string().optional(),
  }),
});

export const serverSystemDataEmptySchema = serverStatusBasicsSchema.extend({
  type: z.union([
    z.literal(ServerStatusType.VIRTUALIZATION),
    z.literal(ServerStatusType.APPLICATIONS),
  ]),
});

export const serverMemoryInfoSchema = z.object({
  total: z.number(),
  in_use: z.number(),
  cached: z.number(),
  data: z.array(z.array(z.number())),
});

export const serverNetworkInterfaceModeSchema = z.nativeEnum(
  ServerNetworkInterfaceMode,
);

export const serverNetworkInterfaceSchema = z.object({
  id: z.string(),
  name: z.string(),
  in: z.number(),
  out: z.number(),
});

export const serverNetworkInterfaceConfigurationSchema = z.object({
  ipv4: z.string(),
  ipv6: z.string(),
  description: z.string(),
  mode: serverNetworkInterfaceModeSchema,
});

export const serverNetworkInterfaceWithConfigurationSchema =
  serverNetworkInterfaceSchema.extend({
    configuration: serverNetworkInterfaceConfigurationSchema,
    supported_media: z.array(z.unknown()),
  });

export const serverNetworkInterfaceDetailedSchema =
  serverNetworkInterfaceWithConfigurationSchema.extend({
    data: z.array(z.array(z.number())),
  });

export const serverProcessorInfoSchema = z.object({
  base_clock: z.string(),
  current_clock: z.string(),
  temperature: z.string(),
  uptime: z.string(),
  usage_percent: z.string(),
  data: z.array(z.array(z.number())),
});

export const serverHealthErrorSchema = z.nativeEnum(ServerHealthError);

export const serverActionsSchema = z.nativeEnum(ServerActions);

export const serverHealthSchema = z.object({
  healthy: z.boolean(),
  errors: z.array(serverHealthErrorSchema),
  actions_available: z.array(serverActionsSchema),
});

const diskTypeSchema = z.any();

const poolStatusSchema = z.any();

const topologyItemStatusSchema = z.any();

const vmPassthroughDeviceChoiceSchema = z.any();

const vmUsbPassthroughDeviceChoiceSchema = z.any();

export const serverPoolBasicsSchema = z.object({
  type: serverPoolTypeSchema,
  disks_type: diskTypeSchema,
  name: z.string(),
});

export const serverDriveSchema = z.object({
  details: z.string(),
  model: z.string(),
  serial: z.string(),
  label: serverDriveLabelSchema,
  type: diskTypeSchema,
  size: z.string(),
  realsize: z.number(),
  devname: z.string(),
  icon: serverStorageIconSchema,
  statusIcon: serverStatusIconsSchema.optional(),
  status: topologyItemStatusSchema.optional(),
  warnings: z.array(serverDriveWarningSchema).optional(),
  errors: z.array(serverDriveErrorSchema).optional(),
  existingData: z.boolean().optional(),
  temperature: z.number().optional(),
  healthDetails: topologyItemStatusSchema.optional(),
});

export const serversSchema = z.object({
  claimed: z.array(serverRecordSchema),
  configured: z.array(serverRecordSchema),
});

export const serverDrivesGroupedBySizeSchema = z.record(
  z.array(serverDriveSchema),
);

export const serverSystemDataStorageSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.STORAGE),
  data: z.object({
    drives: z.array(serverDriveSchema).optional(),
  }),
});

export const serverSystemDataSchema = z.union([
  serverSystemDataSystemSchema,
  serverSystemDataStorageSchema,
  serverSystemDataEmptySchema,
]);

export const serverSystemDeviceSchema = z.object({
  name: z.string(),
  guid: z.string(),
  data: z.union([
    vmPassthroughDeviceChoiceSchema,
    vmUsbPassthroughDeviceChoiceSchema,
  ]),
});

export const serverSystemGPUSchema = serverSystemDeviceSchema;

export const serverSystemAudioSchema = serverSystemDeviceSchema;

export const serverSystemUSBSchema = serverSystemDeviceSchema;

export const serverSystemPCISchema = serverSystemDeviceSchema;

export const serverSystemDevicesSchema = z.object({
  gpu: z.array(serverSystemGPUSchema).optional(),
  audio: z.array(serverSystemAudioSchema).optional(),
  usb: z.array(serverSystemUSBSchema).optional(),
  pci: z.array(serverSystemPCISchema).optional(),
});

export const serverSystemSchema = serverStatusBasicsSchema.extend({
  type: z.literal(ServerStatusType.SYSTEM_OVERVIEW),
  data: z.array(serverSystemDataSchema).optional(),
});

export const serverPoolSchema = serverPoolBasicsSchema.extend({
  path: z.string(),
  errors: z.array(serverPoolErrorSchema).optional(),
  useable_storage: z.string().optional(),
  healthy: z.boolean().optional(),
  status: poolStatusSchema,
  status_detail: z.string(),
  used_storage: z.string().optional(),
  used_percentage: z.number().optional(),
  drives: z.array(serverDriveSchema),
});

export const serverStorageSchema = z.object({
  pools: z.array(serverPoolSchema),
  unassigned: z.array(serverDriveSchema),
});

export const serverFolderSchema = z.object({
  label: z.string(),
  access: serverAccessSchema,
  pool: serverPoolSchema.optional(),
  users: z.array(serverFolderUserSchema).optional(),
});

export const serverFoldersSchema = z.object({
  user: z.array(serverFolderSchema),
  system: z.array(serverFolderSchema),
});
