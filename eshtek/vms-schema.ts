// AUTO-GENERATED FILE - DO NOT EDIT

// Generated by ts-to-zod
import { z } from "zod";
import {
  VMCreateType,
  VMType,
  VMIcons,
  VMStatus,
  VMPerformanceModes,
  VMSnapshotTypes,
  VMScheduleFrequency,
  VMEventTypes,
} from "./vms";

export const vMCreateTypeSchema = z.nativeEnum(VMCreateType);

export const vMTypeSchema = z.nativeEnum(VMType);

export const vMIconsSchema = z.nativeEnum(VMIcons);

export const vMStatusSchema = z.nativeEnum(VMStatus);

export const vMPerformanceModesSchema = z.nativeEnum(VMPerformanceModes);

export const vMSnapshotTypesSchema = z.nativeEnum(VMSnapshotTypes);

export const vMScheduleFrequencySchema = z.nativeEnum(VMScheduleFrequency);

export const vMEventTypesSchema = z.nativeEnum(VMEventTypes);

export const vMSnapshotManualSettingsSchema = z.object({
  type: z.literal(VMSnapshotTypes.MANUAL),
});

export const vMSnapshotScheduledSettingsSchema = z.object({
  type: z.literal(VMSnapshotTypes.SCHEDULED),
  schedule_frequency: vMScheduleFrequencySchema,
});

export const vMSnapshotEventSettingsSchema = z.object({
  type: z.literal(VMSnapshotTypes.EVENT),
  events: z.array(vMEventTypesSchema),
});

export const vMSnapshotSettingsSchema = z.union([
  vMSnapshotManualSettingsSchema,
  vMSnapshotScheduledSettingsSchema,
  vMSnapshotEventSettingsSchema,
]);

export const vMInstallationMediaSchema = z.object({
  path: z.string(),
  name: z.string(),
});

const serverSystemGPUSchema = z.any();

const serverSystemAudioSchema = z.any();

const serverSystemPCISchema = z.any();

const serverSystemUSBSchema = z.any();

const vmDisplayDeviceSchema = z.any();

export const vMSettingsSchema = z.object({
  os: vMTypeSchema,
  performance: vMPerformanceModesSchema,
  connect_directly: z.boolean(),
  autostart: z.boolean(),
  snapshot_settings: vMSnapshotSettingsSchema,
  processors: z.number().optional(),
  memory: z.number().optional(),
  storage: z.number().optional(),
  gpu: serverSystemGPUSchema.optional(),
  audio: serverSystemAudioSchema.optional(),
  pci: z.array(serverSystemPCISchema).optional(),
  usb: z.array(serverSystemUSBSchema).optional(),
  mouse: serverSystemPCISchema.optional(),
  keyboard: serverSystemPCISchema.optional(),
  installation_media: vMInstallationMediaSchema.optional(),
  installation_media_virtio: vMInstallationMediaSchema.optional(),
});

export const vMSettingsSuggestedSchema = vMSettingsSchema.extend({
  suggested: z.object({
    processors: z.number(),
    processors_minimum: z.number(),
    processors_available: z.number(),
    memory: z.number(),
    memory_minimum: z.number(),
    memory_available: z.number(),
    storage: z.number(),
    storage_minimum: z.number(),
    storage_available: z.number(),
    gpu: serverSystemGPUSchema.optional(),
    audio: serverSystemAudioSchema.optional(),
    pci: z.array(serverSystemPCISchema).optional(),
    usb: z.array(serverSystemUSBSchema).optional(),
    mouse: serverSystemPCISchema.optional(),
    keyboard: serverSystemPCISchema.optional(),
    installation_media_available: z.array(vMInstallationMediaSchema),
    installation_media_virtio_available: z.array(vMInstallationMediaSchema),
  }),
});

export const vMBasicsSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string(),
  settings: vMSettingsSchema.optional(),
});

export const vMInfoSchema = vMBasicsSchema.extend({
  id: z.string(),
  status: vMStatusSchema,
});

export const vMInfoDetailedSchema = vMInfoSchema.extend({
  id: z.string(),
  data: z.array(z.array(z.number())),
  display_devices: z.array(vmDisplayDeviceSchema).optional(),
});
